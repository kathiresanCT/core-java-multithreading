package com.pc;

class Message {

	String data = null;
	boolean available = false;

	synchronized void produce() {
		System.out.println(data);
		while(available==true) {
			try {
				System.out.println("in wait");
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}	
		available = true;
		notify();
		
	}

	synchronized String consume() {
		
	while(available==false) {
		try 
        {
              wait();
        }
        catch (InterruptedException ie) 
        {
     	   System.out.println("excep");
        }
	}
	 available=false;
	 notify();
	return data;
	}
}

class Consumer extends Thread {
	Message message=null;
	
	public Consumer(Message m) {
		this.message=m;
		//System.out.println(m.consume());
	}
	
	@Override
	public void run() {
		message.consume();
		try 
        {
			System.out.println("in try consume");
              sleep(1000);
        } 
        catch (InterruptedException ie) 
        {
              ie.printStackTrace();
        }
		
	}

	
}
class Producer extends Thread{
	Message message=null;
	public Producer(Message message) {
		this.message=message;
	}
	public void run() {
		System.out.println("in prod run");
		message.produce();
		try 
        {
			System.out.println("in try prod");
              sleep(1000);
        } 
        catch (InterruptedException ie) 
        {
              ie.printStackTrace();
        }
	}
}
	
	class TestProducerConsumerProblem{
		
		public static void main(String a[]) {
			Message m=new Message();
			Producer p=new Producer(m);
			Consumer c=new Consumer(m);
			p.start();
			c.start();
			
		}
		
	}
